name: Docker Image CI & Deploy to GKE

on:
  push:
    branches: [ "FB-DEV-Feature-EVera" ]
  pull_request:
    branches: [ "FB-DEV-Feature-EVera" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0.13
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    # Paso 1: Checkout del código
    - name: Check out repository
      uses: actions/checkout@v2

    # Paso 2: Configurar JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Paso 3: Configurar variables de entorno para MongoDB
    - name: Set environment variables
      run: echo "MONGO_URI=mongodb://localhost:27017/real-time-notifications" >> $GITHUB_ENV

    # Paso 4: Construir la aplicación con Maven
    - name: Build with Maven
      run: mvn clean package
      working-directory: real-time-notifications-microservice
      env:
        MONGO_URI: ${{ env.MONGO_URI }}

    # Paso 5: Verificar los archivos generados por Maven
    - name: List target directory
      run: ls -al target
      working-directory: real-time-notifications-microservice

    # Paso 6: Construir la imagen Docker
    - name: Build Docker image
      run: docker build -t ghcr.io/whoisvera/my-app:${{ github.sha }} -f src/Dockerfile .
      working-directory: real-time-notifications-microservice

    # Paso 7: Iniciar sesión en GHCR
    - name: Log in to Github Container Registry
      run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # Paso 8: Push de la imagen Docker a GHCR
    - name: Push Docker image
      run: docker push ghcr.io/whoisvera/my-app:${{ github.sha }}

    # Paso 9: Subir reportes de Maven (Surefire)
    - name: Upload Surefire Reports
      uses: actions/upload-artifact@v3
      with:
        name: surefire-reports
        path: real-time-notifications-microservice/target/surefire-reports/

    # Paso 10: Autenticarse con Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        credentials_json: ${{ secrets.GKE_CREDENTIALS }}

    # Paso 11: Configurar kubectl para usar GKE
    - name: Set up kubectl for GKE
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Paso 12: Aplicar el archivo deployment.yaml a GKE
    - name: Apply deployment.yaml to GKE
      run: |
        kubectl apply -f ./deployment.yaml

    # Paso 13: Desplegar la nueva imagen a GKE
    - name: Deploy to GKE
      run: |
        kubectl set image deployment/notification-service \
        notification-service=ghcr.io/whoisvera/my-app:${{ github.sha }}

    # Paso 14: Verificar el estado del despliegue en GKE
    - name: Check rollout status
      run: |
        kubectl rollout status deployment/notification-service

    # Paso 15: Rollback si el despliegue falla
    - name: Rollback if deployment fails
      if: failure()
      run: |
        kubectl rollout undo deployment/notification-service
